{"componentChunkName":"component---src-templates-blog-post-js","path":"/um-jeito-facil-de-fazer-e-jogar-snake-usando-python/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://thais-ribeiro-blog.netlify.com","githubUrl":"https://github.com/thaisribeiro/blog-thais"}},"mdx":{"fields":{"slug":"/um-jeito-facil-de-fazer-e-jogar-snake-usando-python/"},"timeToRead":2,"frontmatter":{"title":"Criando o jogo da cobrinha com python. üêç","description":"Ol√° pessoas maravilhosas desse site, hoje eu vou ensinar para voc√™s de uma forma bem detalhada como usar a biblioteca curses","categories":[],"date":"July 12, 2021","canonical_link":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Criando o jogo da cobrinha com python. üêç\",\n  \"description\": \"Ol√° pessoas maravilhosas desse site, hoje eu vou ensinar para voc√™s de uma forma bem detalhada como usar a biblioteca curses\",\n  \"date\": \"2021-07-12T20:30:32.124Z\",\n  \"categories\": [],\n  \"published\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0mdmbipf5rudyeh5ac7i.jpg\",\n    \"alt\": null\n  })), mdx(\"p\", null, \"Ol\\xE1 pessoas maravilhosas desse site, hoje eu vou ensinar para voc\\xEAs de uma forma bem detalhada como usar a biblioteca \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"curses\"), \" do python para fazer um jogo cl\\xE1ssico no terminal, antes de come\\xE7ar a codar, vamos entender o que \\xE9 essa lib e suas fun\\xE7\\xF5es b\\xE1sicas.\\nVou deixar o \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.python.org/3/library/curses.html\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }, \"link\"), \" da documenta\\xE7\\xE3o da lib para voc\\xEAs irem mais fundo no assunto, mas resumindo, esse m\\xF3dulo fornece uma API para criar interfaces de usu\\xE1rios textuais (TUI), um exemplo, se quisermos escrever aplicativos de linha de comando devemos considerar o uso de curses para implementarmos. Esse pacote vem junto com a instala\\xE7\\xE3o do python e existem conceitos importantes que devemos entender para come\\xE7armos a us\\xE1-la, alguns desses conceitos s\\xE3o:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"O que s\\xE3o janelas\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Como iniciar e deligar curses\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Como adicionar caracteres, atualizar e limpar janelas.\\nTamb\\xE9m \\xE9 necess\\xE1rio entendermos o conceito de coordenadas x e y, para conseguirmos posicionar nossos elementos no terminal.\")), mdx(\"p\", null, \"Sem mais delongas, para n\\xE3o estendermos demais aqui, vamos come\\xE7ar a desenvolver nosso jogo e a medida que formos criando, vou explicando o que utilizei e porque usei daquela forma.\\nNosso jogo precisa de um menu, e vamos criar esse daqui:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7tpxrmgiq7xeydeomty.jpeg\",\n    \"alt\": \"menu\"\n  })), mdx(\"p\", null, \"Para come\\xE7armos nosso projeto vamos iniciar o curses e definirmos as configura\\xE7\\xF5es iniciais, vou usar tamb\\xE9m a extens\\xE3o \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"panel\"), \" que \\xE9 um recurso adicional de profundidade nas janelas, para que elas possam ser empilhadas uma sobre as outras, vamos usar o panel para criamos nossa janela de menu e assim que o jogo for iniciado ainda termos essa janela sendo sobreposta.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"#!/usr/bin/env python\\nimport sys\\nimport curses\\nfrom curses import panel\\nfrom snake import Snake\\n\\n\\nscreen = curses.initscr()\\ncurses.noecho()\\ncurses.curs_set(0)\\ncurses.start_color()\\nscreen.keypad(1)\\n_panel = panel.new_panel(screen)\\npanel.update_panels()\\n\")), mdx(\"p\", null, \"Nota-se que usamos alguns m\\xE9todos como \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"initscr\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"noecho\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"curs_set\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"start_color\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"keypad\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"new_panel\"), \" e \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"update_panels\"), \", vou explicar o que \\xE9 cada um:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"initscr\"), \" \\xE9 a fun\\xE7\\xE3o ir\\xE1 inicializar a biblioteca e retornar um objeto de janela que representa a tela inteira;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"noecho\"), \" desativa o eco autom\\xE1tico de pressionamentos de tecla (evita que o programa insira cada tecla duas vezes);\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"curs_set\"), \" usamos para desabilitar um cursor piscando;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"start_color\"), \" usamos para definir cor para nosso terminal, no nosso caso vamos usar as cores padr\\xF5es;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"new_panel\"), \" e \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"update_panels\"), \" tem a ver com nossos pain\\xE9is mencionados anteriormente, vamos criar uma janela empilhada\")), mdx(\"p\", null, \"Agora vamos criar nossa fun\\xE7\\xE3o de display, vou deixar o coment\\xE1rio no c\\xF3digo explicando o que est\\xE1 acontecendo em cada etapa, nesse m\\xE9todo vamos fazer o processo de montar o menu com t\\xEDtulo e dar funcionalidade para seus itens, criei um menu com duas op\\xE7\\xF5es, de start que ir\\xE1 iniciar o jogo e exit para sair da janela.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"def display():\\n    position = 0\\n    _panel.top()\\n    _panel.show()\\n    screen.clear()\\n\\n    # adicionamos um t\\xEDtulo para o menu\\n    screen.addstr(1, 50, '========== Snake ==========', curses.A_BOLD)\\n\\n    while True:\\n        screen.refresh()\\n        curses.doupdate()\\n\\n        # verificamos a quantidade de itens no menu, e de acordo com a posi\\xE7\\xE3o,\\n        # se for igual ao index, define o modo do cursor\\n        # na tela como normal ou reverso, assim como monta com ajuda do addstr o texto do menu,\\n        # usando os nomes que definimos e as posi\\xE7\\xF5es\\n        # de coordenadas (y,x) que queremos, nesse caso para cada item eu usei o 3\\n        # como ponto inicial e durante o for incremento o y para as op\\xE7\\xF5es\\n        # ficarem uma embaixo da outra\\n        for i, item in enumerate(MENU):\\n            mode = curses.A_NORMAL\\n            if i == position:\\n                mode = curses.A_REVERSE\\n\\n            screen.addstr(3 + i, 50, f'{i}. {item}', mode)\\n\\n         # a fun\\xE7\\xE3o getch \\xE9 usada para aguardar a capturar o pressionamento da tecla\\n        key = screen.getch()\\n\\n        # aqui incremento a posi\\xE7\\xE3o, caso eu d\\xEA enter em algum item do menu \\n        # \\xE9 com a vari\\xE1vel position que consiguirei definir o que vai ser feito\\n        if key == curses.KEY_UP:\\n            position = 0\\n        elif key == curses.KEY_DOWN:\\n            position = len(MENU) - 1\\n        elif key in [curses.KEY_ENTER, ord('\\\\n')]:\\n            if position == len(MENU) - 1:\\n                # como defini o exit no fim do menu, \\n                # aqui verifico se ele \\xE9 o indice final \\n                # e se sim eu saio do programa\\n                sys.exit()\\n            else:\\n                # inicia o jogo da cobra\\n                screen.clear()\\n                # snake()\\n                break\\n    \\n    # limpa a tela anterior ao pressionar a tecla e atualiza a exibi\\xE7\\xE3o com base na pos, \\n    # fecho o painel e atualizo a tela f\\xEDsica para corresponder \\xE0 tela virtual.\\n    screen.clear()\\n    _panel.hide()\\n    panel.update_panels()\\n    curses.doupdate()\\n\")), mdx(\"p\", null, \"Ap\\xF3s nossa fun\\xE7\\xE3o de display criada, vamos criar uma fun\\xE7\\xE3o para rodarmos nosso c\\xF3digo, s\\xF3 para ficar separado e o arquivo menu.py ficar\\xE1 assim:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"#!/usr/bin/env python\\nimport sys\\nimport curses\\nfrom curses import panel\\nfrom cobra import snake\\n\\n\\nscreen = curses.initscr()\\ncurses.noecho()\\ncurses.curs_set(0)\\ncurses.start_color()\\nscreen.keypad(1)\\n_panel = panel.new_panel(screen)\\npanel.update_panels()\\nMENU = ['Start', 'Exit']\\n\\n\\ndef display():\\n    position = 0\\n    _panel.top()\\n    _panel.show()\\n    screen.clear()\\n\\n    # adicionamos um t\\xEDtulo para o menu\\n    screen.addstr(1, 50, '========== Snake ==========', curses.A_BOLD)\\n\\n    while True:\\n        screen.refresh()\\n        curses.doupdate()\\n\\n        # verificamos a quantidade de itens no menu, e de acordo com a posi\\xE7\\xE3o,\\n        # se for igual ao index, define o modo do cursor\\n        # na tela como normal ou reverso, assim como monta com ajuda do addstr o texto do menu,\\n        # usando os nomes que definimos e as posi\\xE7\\xF5es\\n        # de coordenadas (y,x) que queremos, nesse caso para cada item eu usei o 3\\n        # como ponto inicial e durante o for incremento o y para as op\\xE7\\xF5es\\n        # ficarem uma embaixo da outra\\n        for i, item in enumerate(MENU):\\n            mode = curses.A_NORMAL\\n            if i == position:\\n                mode = curses.A_REVERSE\\n\\n            screen.addstr(3 + i, 50, f'{i}. {item}', mode)\\n\\n         # a fun\\xE7\\xE3o getch \\xE9 usada para aguardar a capturar o pressionamento da tecla\\n        key = screen.getch()\\n\\n        # aqui incremento a posi\\xE7\\xE3o, caso eu d\\xEA enter em algum item do menu \\n        # \\xE9 com a vari\\xE1vel position que consiguirei definir o que vai ser feito\\n        if key == curses.KEY_UP:\\n            position = 0\\n        elif key == curses.KEY_DOWN:\\n            position = len(MENU) - 1\\n        elif key in [curses.KEY_ENTER, ord('\\\\n')]:\\n            if position == len(MENU) - 1:\\n                # como defini o exit no fim do menu, \\n                # aqui verifico se ele \\xE9 o indice final \\n                # e se sim eu saio do programa\\n                sys.exit()\\n            else:\\n                # inicia o jogo da cobra\\n                screen.clear()\\n                snake()\\n                break\\n    \\n    # limpa a tela anterior ao pressionar a tecla e atualiza a exibi\\xE7\\xE3o com base na pos, \\n    # fecho o painel e atualizo a tela f\\xEDsica para corresponder \\xE0 tela virtual.\\n    screen.clear()\\n    _panel.hide()\\n    panel.update_panels()\\n    curses.doupdate()\\n\\n\\ndef run(object):\\n    display()\\n  \\nif __name__ == '__main__':\\n    curses.wrapper(run)\\n\")), mdx(\"p\", null, \"Com isso fechamos o menu e vamos para nosso jogo, no mesmo esquema do c\\xF3digo acima, em todo o c\\xF3digo h\\xE1 coment\\xE1rios para facilitar o entendimento.\\nCome\\xE7amos iniciando o curses porque eu fiz o c\\xF3digo em arquivo separado, mas no projeto final iniciamos apenas uma vez, criamos ent\\xE3o uma nova janela com o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"newin\"), \" setando as coordenadas y e x, sim, nesse caso a fun\\xE7\\xE3o recebe o argumento y antes do x e criamos um m\\xE9todo para iniciar o jogo.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"import curses\\nfrom random import randint\\n\\nESC = 27  # a tecla esc \\xE9 a nr 27\\n\\ncurses.initscr()\\ncurses.noecho()\\ncurses.curs_set(0)\\nscreen = curses.newwin(20, 50, 0, 0) #y,x\\nscreen.keypad(1)\\nscreen.border(0)\\nscreen.nodelay(1)\\n\\ndef snake():\\n    # defino aqui as posi\\xE7\\xF5es x,y e a quantidade de n\\xF3s da minha cobra,\\n    # cada n\\xF3 parte da mesma posi\\xE7\\xE3o no eixo y\\n    # e em posi\\xE7\\xF5es diferentes no eixo x, para criar o \\\"000\\\"\\n    snake = [(1, 3), (1, 2), (1, 1)]\\n\\n    # defino aqui a posi\\xE7\\xE3o inicial da comida na janela, qual ser\\xE1 seu posicionamento.\\n    food = (10, 20)\\n    \\n    #inicia a comida na posi\\xE7\\xE3o escolhida\\n    screen.addch(food[0], food[1], '\\u047D')\\n    \\n    score = 0  # a pontua\\xE7\\xE3o do jogo come\\xE7a em 0\\n\\n    # defino a key com o pressionamento da seta para a direita,\\n    # para iniciar o movimento da cobra\\n    key = curses.KEY_RIGHT\\n\\n    while key != ESC:\\n        # adicionando um texto com nossa pontua\\xE7\\xE3o, que a medida que formos \\n        # jogando e acertando, ser\\xE1 incrementado o score\\n        screen.addstr(0, 2, f'Pontua\\xE7\\xE3o {str(score)} ')\\n        \\n        # velocidade da cobra na janela\\n        screen.timeout(150 - (len(snake)) // 5 + len(snake)//10 % 120)\\n        old_key = key\\n        event = screen.getch()  # aguarda e recupera o pressionamento do usu\\xE1rio na tela\\n        key = event if event != -1 else old_key\\n\\n        if key not in [curses.KEY_LEFT, curses.KEY_RIGHT, curses.KEY_UP, curses.KEY_DOWN, ESC]:\\n            key = old_key\\n\\n        # Aqui verificamos a posi\\xE7\\xE3o inicial do primeiro n\\xF3 da cobra \\n        # e de acordo com a key pressionada pelo usu\\xE1rio, ou seja, quando as setas\\n        # s\\xE3o pressionadas, verificamos quais s\\xE3o e incrementamos os eixos x e y\\n        y = snake[0][0]\\n        x = snake[0][1]\\n\\n        if key == curses.KEY_DOWN:\\n            y += 1\\n        elif key == curses.KEY_UP:\\n            y -= 1\\n        elif key == curses.KEY_RIGHT:\\n            x += 1\\n        elif key == curses.KEY_LEFT:\\n            x -= 1\\n\\n        snake.insert(0, (y, x))\\n\\n        # vamos checar se nosso x e y n\\xE3o corresponde as bordas que iniciamos l\\xE1 em cima no curses.newwin(20, 50, 0, 0), \\n        # se corresponder, significa que os n\\xF3s da cobra bateram na parede, se isso acontecer temos que sair do jogo.\\n        if y == 0 or y == 19:\\n            break\\n        if x == 0 or x == 49:\\n            break\\n\\n        # se a posi\\xE7\\xE3o do ultimo n\\xF3 for correspondente ao n\\xF3 inicial, significa que a cabe\\xE7a da cobra bateu na calda, \\n        # devemos sair do jogo.\\n        if snake[0] in snake[1:]:\\n            break\\n\\n        if snake[0] == food:\\n            # nesse momento verificamos se a posi\\xE7\\xE3o do primeiro n\\xF3 da cobra est\\xE1 nos eixos da comida, se for no inicio,\\n            # vai verificar se est\\xE1 na posi\\xE7\\xE3o (10,20) que definimos, se sim, significa que a cobra comeu o alimento,\\n            # ent\\xE3o vamos zerar a tupla da comida e fazemos um la\\xE7o para que enquanto essa tupla estiver vazia,\\n            # com ajuda da lib random, denifimos novos posicionamentos para esse objeto,\\n            # a lib vai criar posicionamentos randomicos dentro do limite da janela que estipulamos no come\\xE7o,\\n            # por isso dentre 1,18 e 1,48. Se a comida for gerada em cima de uma posi\\xE7\\xE3o que a cobra estiver \\n            # a tupla \\xE9 zerada novamente e o la\\xE7o \\xE9 continuado, caso contr\\xE1rio, damos um addch\\n            # passando as novas posi\\xE7\\xF5es da comida e inserindo o caracter escolhido novamente nessa posi\\xE7\\xE3o\\n            score += 1\\n            food = ()\\n            while food == ():\\n                food = (randint(1, 18), randint(1, 48))\\n                if food == snake:\\n                    food = ()\\n            screen.addch(food[0], food[1], '\\u047D')\\n        else:\\n            # caso contr\\xE1rio vamos remover o ultimo caracter \\u25CF adicionado e mover a cobra na janela.\\n            last = snake.pop()\\n            screen.addch(last[0], last[1], ' ')\\n\\n        # Sempre inserimos o caracter na cobra\\n        screen.addch(snake[0][0], snake[0][1], '\\u25CF')\\n\\n\")), mdx(\"p\", null, \"Voltando ao nosso primeiro c\\xF3digo de menu, importamos l\\xE1 o nosso arquivo do jogo e onde deixamos #snake comentado removemos o coment\\xE1rio e damos um python menu.py para jogarmos.\\nPara n\\xE3o deixar o artigo gigante, vamos concluir por aqui, mas o projeto est\\xE1 no \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://replit.com/@ThaisRibeiro3/snake\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }, \"replit\"), \" para voc\\xEAs analisarem.\\nBom pessoal, a ideia foi compartilhar com voc\\xEAs como funciona o m\\xF3dulo do python de uma maneira divertida, jogando! Atualmente quase n\\xE3o vemos nenhuma interface em terminal, mas como eu sempre falo, sempre bom absorver conte\\xFAdo, vai que uma hora precisamos, ent\\xE3o \\xE9 isso, fico por aqui, um beijo e at\\xE9 mais!\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"890f0a75-f726-5db0-932d-45f2d6a4852f","previous":{"id":"22b87dba-0fc3-5d7c-8a5c-276d23c7a2d3","fields":{"slug":"/arquitetura-de-software:definicao-ou-conceito/","published":true},"frontmatter":{"redirect_from":null,"title":"Arquitetura de Software: Defini√ß√£o ou Conceito? üìë"}},"next":{"id":"a6478b4e-3a5b-574f-8b3f-772447cd612d","fields":{"slug":"/como-criar-um-chatbot-usando-aprendizado-profundo-e-python/","published":true},"frontmatter":{"redirect_from":null,"title":"Como criar um chatbot usando aprendizado profundo e Python? üëæ"}}}},"staticQueryHashes":["2589769190","3617321856","4131332129","759284515"]}